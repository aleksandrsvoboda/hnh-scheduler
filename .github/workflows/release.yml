name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read

jobs:
  bump-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_number: ${{ steps.version.outputs.version_number }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Bump version
        id: version
        run: |
          npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_number=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Commit version bump
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git tag ${{ steps.version.outputs.new_version }}
          git push origin HEAD --follow-tags

  build:
    needs: bump-version
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
          - os: macos-13
            platform: darwin
          - os: ubuntu-latest
            platform: linux
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.bump-version.outputs.new_version }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python (for native dependencies)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Rebuild native dependencies
        if: matrix.platform == 'win32'
        run: npm rebuild
        
      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: sudo apt-get update && sudo apt-get install -y libsecret-1-dev
        
      - name: Build application
        run: npm run build
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.7z
            dist/*.zip
          retention-days: 5
          
  create-release:
    needs: [bump-version, build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.bump-version.outputs.new_version }}
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare release assets
        run: |
          mkdir release-assets
          find artifacts -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.7z" -o -name "*.zip" \) -exec cp {} release-assets/ \;
          ls -la release-assets/
          
      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract latest version changes from CHANGELOG.md
            CHANGELOG_CONTENT=$(sed -n "/## \[${{ needs.bump-version.outputs.version_number }}\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
            if [ -z "$CHANGELOG_CONTENT" ]; then
              CHANGELOG_CONTENT="Release ${{ needs.bump-version.outputs.new_version }}"
            fi
          else
            CHANGELOG_CONTENT="Release ${{ needs.bump-version.outputs.new_version }}"
          fi
          
          # Write multiline content to output
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "content<<$EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.bump-version.outputs.new_version }}
          name: HnH Scheduler ${{ needs.bump-version.outputs.new_version }}
          body: |
            ${{ steps.changelog.outputs.content }}
            
            ## Downloads
            
            **Windows:**
            - `HnH Scheduler Setup.exe` - Windows installer (recommended)
            - `HnH Scheduler.exe` - Portable Windows executable
            
            **macOS:**
            - `HnH Scheduler.dmg` - macOS disk image
            
            **Linux:**
            - `HnH Scheduler.AppImage` - Universal Linux executable
            - `hnh-scheduler_*_amd64.deb` - Debian/Ubuntu package
            
            ## Installation Notes
            
            - **Windows**: Run the installer or portable executable. Windows may show a security warning for unsigned applications.
            - **macOS**: Open the DMG and drag the app to Applications. You may need to allow the app in System Preferences > Security & Privacy.
            - **Linux**: Make the AppImage executable (`chmod +x`) or install the DEB package.
            
            ## Requirements
            
            - Java Runtime Environment (JRE) 8 or newer
            - Haven & Hearth client installation
          files: release-assets/*
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}